"""Repository rules for pulling container images."""

load(
    ":download.bzl",
    _download_blob = "download_blob",
    _download_manifest = "download_manifest",
)

def _pull_impl(rctx):
    """Pull an image from a registry and generate a BUILD file."""
    have_valid_digest = True
    if len(rctx.attr.digest) != 71:
        have_valid_digest = False
    elif not rctx.attr.digest.startswith("sha256:"):
        have_valid_digest = False
    reference = rctx.attr.digest if have_valid_digest else rctx.attr.tag
    manifest_kwargs = dict(
        canonical_id = rctx.attr.repository + ":" + rctx.attr.tag,
    )
    root_blob_info = _download_manifest(rctx, reference = reference, **manifest_kwargs)
    data = {root_blob_info.path: root_blob_info.data}
    root_blob = json.decode(root_blob_info.data)
    media_type = root_blob.get("mediaType", "unknown")

    manifests = []
    if media_type in [MEDIA_TYPE_INDEX, DOCKER_MANIFEST_LIST_V2]:
        is_index = True
        manifests = root_blob.get("manifests", [])
    elif media_type in [MEDIA_TYPE_MANIFEST, DOCKER_MANIFEST_V2]:
        is_index = False
        manifests = [{"mediaType": MEDIA_TYPE_MANIFEST, "digest": rctx.attr.digest}]
    else:
        fail("invalid mediaType in manifest: {}".format(media_type))

    # download all manifests and configs
    for manifest_index in manifests:
        if not manifest_index.get("mediaType") in [MEDIA_TYPE_MANIFEST, DOCKER_MANIFEST_V2]:
            continue
        if is_index:
            manifest_info = _download_manifest(rctx, reference = manifest_index["digest"])
            data[manifest_info.path] = manifest_info.data
        else:
            manifest_info = root_blob_info
        manifest = json.decode(manifest_info.data)
        config_info = _download_blob(rctx, digest = manifest["config"]["digest"])
        data[config_info.path] = config_info.data

    files = {
        path: "//:{}".format(path)
        for path in data.keys()
    }

    registries = []
    if rctx.attr.registry:
        registries.append(rctx.attr.registry)
    if len(rctx.attr.registries) > 0:
        registries.extend(rctx.attr.registries)

    # write out the files
    rctx.file(
        "BUILD.bazel",
        content = """
# This file was generated by the pull repository rule.
load("@rules_img//img/private:import.bzl", "image_import")

image_import(
    name = {name},
    digest = {digest},
    data = {data},
    files = {files},
    registries = {registries},
    repository = {repository},
    tag = {tag},
    visibility = ["//visibility:public"],
)

""".format(
            name = repr(rctx.original_name),
            digest = repr(rctx.attr.digest),
            data = json.encode_indent(
                data,
                prefix = "    ",
                indent = "    ",
            ),
            files = json.encode_indent(
                files,
                prefix = "    ",
                indent = "    ",
            ),
            registries = json.encode_indent(
                registries,
                prefix = "    ",
                indent = "    ",
            ),
            repository = repr(rctx.attr.repository),
            tag = repr(rctx.attr.tag),
        ),
    )

pull = repository_rule(
    implementation = _pull_impl,
    attrs = {
        "registry": attr.string(),
        "registries": attr.string_list(),
        "repository": attr.string(
            mandatory = True,
        ),
        "tag": attr.string(
            mandatory = True,
        ),
        "digest": attr.string(),
    },
)

MEDIA_TYPE_INDEX = "application/vnd.oci.image.index.v1+json"
DOCKER_MANIFEST_LIST_V2 = "application/vnd.docker.distribution.manifest.list.v2+json"
MEDIA_TYPE_MANIFEST = "application/vnd.oci.image.manifest.v1+json"
DOCKER_MANIFEST_V2 = "application/vnd.docker.distribution.manifest.v2+json"
