load("@rules_img//img:image.bzl", "image_index", "image_manifest")
load("@rules_img//img:layer.bzl", "layer_from_tar")

layer_from_tar(
    name = "layer_libc++",
    src = select({
        "@platforms//cpu:arm64": "@base_image_arm64_libcxx//file",
        "@platforms//cpu:x86_64": "@base_image_amd64_libcxx//file",
    }),
    tags = ["manual"],
    target_compatible_with = select({
        "@platforms//cpu:arm64": [],
        "@platforms//cpu:x86_64": [],
    }),
)

layer_from_tar(
    name = "layer_libstdc++",
    src = select({
        "@platforms//cpu:arm64": "@base_image_arm64_libstdcxx//file",
        "@platforms//cpu:x86_64": "@base_image_amd64_libstdcxx//file",
    }),
    tags = ["manual"],
    target_compatible_with = select({
        "@platforms//cpu:arm64": [],
        "@platforms//cpu:x86_64": [],
    }),
)

image_manifest(
    name = "manifest",
    layers = select({
        "//platform:libc++": [":layer_libc++"],
        "//platform:libstdc++": [":layer_libstdc++"],
    }),
    tags = ["manual"],
)

image_index(
    name = "base",
    manifests = [":manifest"],
    platforms = select({
        "//platform:libc++": [
            "//platform:linux_amd64_libc++",
            "//platform:linux_arm64_libc++",
        ],
        "//platform:libstdc++": [
            "//platform:linux_amd64_libstdc++",
            "//platform:linux_arm64_libstdc++",
        ],
    }),
    tags = ["manual"],
    target_compatible_with = select({
        "//platform:libc++": [],
        "//platform:libstdc++": [],
    }),
    visibility = ["//:__subpackages__"],
)
