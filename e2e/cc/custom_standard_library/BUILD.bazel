load("@bazel_skylib//rules:build_test.bzl", "build_test")
load("@rules_img//img:image.bzl", "image_index", "image_manifest")
load("@rules_img//img:layer.bzl", "image_layer")
load("@rules_img//img:push.bzl", "image_push")

image_layer(
    name = "cc_layer",
    srcs = {
        "/bin/app": "//:app",
    },
)

image_manifest(
    name = "cc_image",
    base = select({
        "//platform:libc++": "//base",
        "//platform:libstdc++": "//base",
        "//conditions:default": None,
    }),
    entrypoint = ["/bin/app"],
    layers = [
        ":cc_layer",
    ],
)

image_index(
    name = "cc_index_libc++",
    manifests = [":cc_image"],
    platforms = [
        "//platform:linux_amd64_libc++",
        "//platform:linux_arm64_libc++",
    ],
)

image_index(
    name = "cc_index_libstdc++",
    manifests = [":cc_image"],
    platforms = [
        "//platform:linux_amd64_libstdc++",
        "//platform:linux_arm64_libstdc++",
    ],
)

image_push(
    name = "push_libc++",
    image = ":cc_index_libc++",
    registry = "ghcr.io",
    repository = "malt3/rules_img/cc",
    tag = "libcxx",
)

image_push(
    name = "push_libstdc++",
    image = ":cc_index_libstdc++",
    registry = "ghcr.io",
    repository = "malt3/rules_img/cc",
    tag = "libstdcxx",
)

build_test(
    name = "test",
    targets = [
        ":cc_layer",
        ":cc_image",
        ":cc_index_libc++",
        ":cc_index_libstdc++",
        ":push_libc++",
        ":push_libstdc++",
    ],
)
