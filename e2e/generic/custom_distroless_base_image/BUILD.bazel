load("@rules_distroless//distroless:defs.bzl", "cacerts", "flatten", "group", "java_keystore", "passwd")
load("@rules_img//img:image.bzl", "image_index", "image_manifest")
load("@rules_img//img:push.bzl", "image_push")

package(default_visibility = ["//visibility:public"])

# Export the apt lockfile and manifest for the module extension
exports_files([
    "apt.lock.json",
    "apt.yaml",
])

# Create group entries (similar to groupadd)
group(
    name = "groups",
    entries = [
        # Root group
        dict(
            name = "root",
            gid = 0,
            users = ["root"],
        ),
        # Application group
        dict(
            name = "app",
            gid = 1000,
            users = ["appuser"],
        ),
        # Database group
        dict(
            name = "dbusers",
            gid = 2000,
            users = [
                "dbadmin",
                "dbuser",
            ],
        ),
        # Web server group
        dict(
            name = "www-data",
            gid = 33,
            users = ["www-data"],
        ),
    ],
)

# Create passwd entries (similar to useradd/passwd)
passwd(
    name = "passwd",
    entries = [
        # Root user
        dict(
            gecos = ["root"],
            gid = 0,
            home = "/root",
            shell = "/bin/bash",
            uid = 0,
            username = "root",
        ),
        # Application user
        dict(
            gecos = ["Application User"],
            gid = 1000,
            home = "/home/appuser",
            shell = "/bin/bash",
            uid = 1000,
            username = "appuser",
        ),
        # Database admin
        dict(
            gecos = ["Database Administrator"],
            gid = 2000,
            home = "/home/dbadmin",
            shell = "/bin/bash",
            uid = 2001,
            username = "dbadmin",
        ),
        # Database user
        dict(
            gecos = ["Database User"],
            gid = 2000,
            home = "/home/dbuser",
            shell = "/bin/false",
            uid = 2002,
            username = "dbuser",
        ),
        # Web server user
        dict(
            gecos = ["Web Server User"],
            gid = 33,
            home = "/var/www",
            shell = "/usr/sbin/nologin",
            uid = 33,
            username = "www-data",
        ),
    ],
)

# Generate CA certificates bundle
cacerts(
    name = "ca_certificates",
    package = "@bookworm//ca-certificates/amd64:data",
)

# Create a Java keystore with custom certificates
java_keystore(
    name = "custom_java_keystore",
    certificates = [
        "custom-ca.crt",
        "internal-root.crt",
    ],
)

[
    flatten(
        name = "base_layer_%s" % arch,
        compress = "gzip",
        target_compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:%s" % {
                "amd64": "x86_64",
                "arm64": "aarch64",
            }[arch],
        ],
        tars = [
            "@bookworm//base-files/%s:data" % arch,
            "@bookworm//netbase/%s:data" % arch,
            "@bookworm//tzdata/%s:data" % arch,
            "@bookworm//media-types/%s:data" % arch,
            ":groups",
            ":passwd",
            ":ca_certificates",
            ":custom_java_keystore",
        ],
    )
    for arch in [
        "amd64",
        "arm64",
    ]
]

# Create a complete distroless base image with all features
image_manifest(
    name = "base_manifest",
    env = {
        "PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "SSL_CERT_FILE": "/etc/ssl/certs/ca-certificates.crt",
    },
    layers = select({
        "@platforms//cpu:arm64": [":base_layer_arm64"],
        "@platforms//cpu:x86_64": [":base_layer_amd64"],
    }),
    user = "appuser",
    working_dir = "/app",
)

image_index(
    name = "distroless_base",
    manifests = [":base_manifest"],
    platforms = [
        "//platform:linux_amd64",
        "//platform:linux_arm64",
    ],
)

[
    flatten(
        name = "python_layer_%s" % arch,
        compress = "gzip",
        target_compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:%s" % {
                "amd64": "x86_64",
                "arm64": "aarch64",
            }[arch],
        ],
        tars = [
            "@bookworm//python3",
            "@bookworm//:dpkg_status",
        ],
    )
    for arch in [
        "amd64",
        "arm64",
    ]
]

# Create a minimal Python distroless image
image_manifest(
    name = "python_manifest",
    entrypoint = ["python3"],
    env = {
        "PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "SSL_CERT_FILE": "/etc/ssl/certs/ca-certificates.crt",
        "PYTHONUNBUFFERED": "1",
    },
    layers = select({
        "@platforms//cpu:arm64": [
            ":base_layer_arm64",
            ":python_layer_arm64",
        ],
        "@platforms//cpu:x86_64": [
            ":base_layer_amd64",
            ":python_layer_amd64",
        ],
    }),
    user = "appuser",
    working_dir = "/app",
)

image_index(
    name = "python_distroless",
    manifests = [":python_manifest"],
    platforms = [
        "//platform:linux_amd64",
        "//platform:linux_arm64",
    ],
)

image_push(
    name = "push_python_distroless",
    image = ":python_distroless",
    registry = "ghcr.io",
    repository = "malt3/rules_img/python_distroless",
    tag = "latest",
)
