load("@bazel_skylib//rules:build_test.bzl", "build_test")
load("@rules_img//img:image.bzl", "image_index", "image_manifest")
load("@rules_img//img:layer.bzl", "image_layer")
load("@rules_img//img:load.bzl", "image_load")

image_layer(
    name = "layer",
    srcs = {
        "/hello.txt": "hello.txt",
    },
)

image_manifest(
    name = "image",
    base = "@alpine",
    cmd = [
        "/bin/cat",
        "/hello.txt",
    ],
    layers = [":layer"],
)

image_index(
    name = "index",
    manifests = [":image"],
    platforms = [
        "//platform:linux_amd64",
        "//platform:linux_arm64",
    ],
)

# load an image (single platform)
image_load(
    name = "load_image",
    image = ":image",
    tag = "ghcr.io/malt3/rules_img:sideloaded",
    visibility = ["//visibility:public"],
)

# load an image with template variables
image_load(
    name = "load_image_templated",
    build_settings = {
        "REGISTRY": "//build_settings:registry",
        "USER": "//build_settings:user",
        "TAG": "//build_settings:tag",
    },
    image = ":image",
    tag = "{{.REGISTRY}}/{{.USER}}/rules_img:{{.TAG}}",
    visibility = ["//visibility:public"],
)

# Load an index (multi-platform)
image_load(
    name = "load_index",
    image = ":index",
    tag = "ghcr.io/malt3/rules_img:sideloaded",
    visibility = ["//visibility:public"],
)

# Test loading with a name that needs normalization
image_load(
    name = "load_normalized",
    image = ":index",
    # this will be loaded as docker.io/library/funny_name:sideloaded
    tag = "funny_name:sideloaded",
    visibility = ["//visibility:public"],
)

# Load alpine base image without modifying it
image_load(
    name = "load_alpine",
    image = "@alpine",
    tag = "ghcr.io/malt3/rules_img:alpine-sideloaded",
    visibility = ["//visibility:public"],
)

# Load a cuda base image without modifying it
image_load(
    name = "load_cuda",
    image = "@cuda",
    tag = "ghcr.io/malt3/rules_img:cuda-sideloaded",
    visibility = ["//visibility:public"],
)

# Load with multiple tags
image_load(
    name = "load_multi_tags",
    image = ":image",
    tag_list = [
        "ghcr.io/malt3/rules_img:multi-latest",
        "ghcr.io/malt3/rules_img:multi-v1.0.0",
        "ghcr.io/malt3/rules_img:multi-stable",
    ],
    visibility = ["//visibility:public"],
)

build_test(
    name = "test",
    targets = [
        ":layer",
        ":image",
        ":load_index",
        ":load_image",
        ":load_image_templated",
        ":load_normalized",
        ":load_multi_tags",
    ],
)
